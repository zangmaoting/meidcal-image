# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XbCB3TDdfgKUVf6n1uIYuaQke9JK2PLD
"""

from google.colab import drive
drive.mount('/content/drive')

import sys
sys.path.append('/content/drive/MyDrive/CSC8639_folder/')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/CSC8639_folder
!ls

!pip install SimpleITK

import os
import norm_intens_crop
import time
import numpy as np
import SimpleITK as sitk

import os
import random
import shutil


source_hggfolder = '/content/drive/MyDrive/CSC8639_folder/archive/MICCAI_BraTS_2018_Data_Training/HGG'
sample_hggfolder = '/content/drive/MyDrive/CSC8639_folder/sample_data/sample_hgg'

subfolder_hgg = [subfolder for subfolder in os.listdir(source_hggfolder) if os.path.isdir(os.path.join(source_hggfolder, subfolder))]

num_hggfolders_select = int(len(subfolder_hgg) * 0.2)
selected_hggfolders = random.sample(subfolder_hgg, num_hggfolders_select)

for subfolder_name in selected_hggfolders:
    sourcehgg_path = os.path.join(source_hggfolder, subfolder_name)
    targethgg_path = os.path.join(sample_hggfolder, subfolder_name)
    shutil.copytree(sourcehgg_path, targethgg_path)

print(f"{num_hggfolders_select} files randomly selected and copied to {sample_hggfolder}.")

import random
import shutil
source_lggfolder = '/content/drive/MyDrive/CSC8639_folder/archive/MICCAI_BraTS_2018_Data_Training/LGG'
sample_lggfolder = '/content/drive/MyDrive/CSC8639_folder/sample_data/sample_lgg'
subfolder_lgg = [subfolder for subfolder in os.listdir(source_lggfolder) if os.path.isdir(os.path.join(source_lggfolder, subfolder))]
num_lggfolders_select = int(len(subfolder_lgg) * 0.4)
selected_lggfolders = random.sample(subfolder_lgg, num_lggfolders_select)
for subfolder_name in selected_lggfolders:
    sourcelgg_path = os.path.join(source_lggfolder, subfolder_name)
    targetlgg_path = os.path.join(sample_lggfolder, subfolder_name)
    shutil.copytree(sourcelgg_path, targetlgg_path)

print(f"{num_lggfolders_select} files randomly selected and copied to {sample_lggfolder}.")

flair_addon = '_flair.nii'
t1_addon = '_t1.nii'
t1ce_addon = '_t1ce.nii'
t2_addon = '_t2.nii'
label_addon = '_seg.nii'
bratshgg_path = '/content/drive/MyDrive/CSC8639_folder/sample_data/sample_hgg'
bratslgg_path = '/content/drive/MyDrive/CSC8639_folder/sample_data/sample_lgg'
outputImg_path = '/content/drive/MyDrive/CSC8639_folder/all_data/img'
outputLabel_path = '/content/drive/MyDrive/CSC8639_folder/all_data/label'

pathhgg_list = norm_intens_crop.file_name_path(bratshgg_path)
pathlgg_list = norm_intens_crop.file_name_path(bratslgg_path)

pathhgg_list = norm_intens_crop.file_name_path(bratshgg_path)
pathlgg_list = norm_intens_crop.file_name_path(bratslgg_path)

corrector = sitk.N4BiasFieldCorrectionImageFilter()

start_HGG = time.time()

start_HGG = time.time()
for subsetindex in range(len(pathhgg_list)):
    brats_subset_path = bratshgg_path + "/" + str(pathhgg_list[subsetindex]) + "/"

    # get the four modalities and label of each folder
    flair_image = brats_subset_path + str(pathhgg_list[subsetindex]) + flair_addon
    t1_image = brats_subset_path + str(pathhgg_list[subsetindex]) + t1_addon
    t1ce_image = brats_subset_path + str(pathhgg_list[subsetindex]) + t1ce_addon
    t2_image = brats_subset_path + str(pathhgg_list[subsetindex]) + t2_addon
    label_image = brats_subset_path + str(pathhgg_list[subsetindex]) + label_addon

    # converting to sitk
    flair_src = sitk.ReadImage(flair_image, sitk.sitkFloat32)
    t1_src = sitk.ReadImage(t1_image, sitk.sitkFloat32)
    t1ce_src = sitk.ReadImage(t1ce_image, sitk.sitkFloat32)
    t2_src = sitk.ReadImage(t2_image, sitk.sitkFloat32)
    label = sitk.ReadImage(label_image, sitk.sitkUInt8)

    # performing N4ITK bias field correction on each MRI
    flair_n4itk_mask = sitk.OtsuThreshold(flair_src, 0, 1, 200)
    flair_n4itk = corrector.Execute(flair_src, flair_n4itk_mask)
    t1_n4itk_mask = sitk.OtsuThreshold(t1_src, 0, 1, 200)
    t1_n4itk = corrector.Execute(t1_src, t1_n4itk_mask)
    t1ce_n4itk_mask = sitk.OtsuThreshold(t1ce_src, 0, 1, 200)
    t1ce_n4itk = corrector.Execute(t1ce_src, t1ce_n4itk_mask)
    t2_n4itk_mask = sitk.OtsuThreshold(t2_src, 0, 1, 200)
    t2_n4itk = corrector.Execute(t2_src, t2_n4itk_mask)

    # getting arrays in sitk current size 240x240x155 each
    flair_array = sitk.GetArrayFromImage(flair_n4itk)
    t1_array = sitk.GetArrayFromImage(t1_n4itk)
    t1ce_array = sitk.GetArrayFromImage(t1ce_n4itk)
    t2_array = sitk.GetArrayFromImage(t2_n4itk)
    label_array = sitk.GetArrayFromImage(label)

    # normalise the four modalities separately since they have different contrasts
    flair_array_nor = norm_intens_crop.norm_intens_filter(flair_array)
    t1_array_nor = norm_intens_crop.norm_intens_filter(t1_array)
    t1ce_array_nor = norm_intens_crop.norm_intens_filter(t1ce_array)
    t2_array_nor = norm_intens_crop.norm_intens_filter(t2_array)

    # cropping each slice such that new size is 160x160x155 each
    flair_crop = norm_intens_crop.crop_center(flair_array_nor, 160, 160)
    t1_crop = norm_intens_crop.crop_center(t1_array_nor, 160, 160)
    t1ce_crop = norm_intens_crop.crop_center(t1ce_array_nor, 160, 160)
    t2_crop = norm_intens_crop.crop_center(t2_array_nor, 160, 160)
    label_crop = norm_intens_crop.crop_center(label_array, 160, 160)

    print(f"Iteration {subsetindex+1}/{len(pathhgg_list)} completed. Processing: {brats_subset_path}")

    for n_slice in range(flair_crop.shape[0]):
        if np.max(label_crop[n_slice,:,:]) != 0:
            labelImg = label_crop[n_slice,:,:]

            four_modality_array = np.zeros((flair_crop.shape[1],flair_crop.shape[2],4), np.float)
            flairImg = flair_crop[n_slice,:,:]
            flairImg = flairImg.astype(np.float)
            four_modality_array[:,:,0] = flairImg

            t1Img = t1_crop[n_slice,:,:]
            t1Img = t1Img.astype(np.float)
            four_modality_array[:,:,1] = t1Img

            t1ceImg = t1ce_crop[n_slice,:,:]
            t1ceImg = t1ceImg.astype(np.float)
            four_modality_array[:,:,2] = t1ceImg

            t2Img = t2_crop[n_slice,:,:]
            t2Img = t2Img.astype(np.float)
            four_modality_array[:,:,3] = t2Img

            imagepath = outputImg_path + "/" + str(pathlgg_list[subsetindex]) + "_" + str(n_slice) + ".npy"
            labelpath = outputLabel_path + "/" + str(pathlgg_list[subsetindex]) + "_" + str(n_slice) + ".npy"
            np.save(imagepath, four_modality_array)
            np.save(labelpath, labelImg)

start_LGG = time.time()
for subsetindex in range(len(pathlgg_list)):
    brats_subset_path = bratslgg_path + '/' + str(pathlgg_list[subsetindex]) + '/'

    flair_image = brats_subset_path + str(pathlgg_list[subsetindex]) + flair_addon
    t1_image = brats_subset_path + str(pathlgg_list[subsetindex]) + t1_addon
    t1ce_image = brats_subset_path + str(pathlgg_list[subsetindex]) + t1ce_addon
    t2_image = brats_subset_path + str(pathlgg_list[subsetindex]) + t2_addon
    label_image = brats_subset_path + str(pathlgg_list[subsetindex]) + label_addon

    flair_src = sitk.ReadImage(flair_image, sitk.sitkFloat32)
    t1_src = sitk.ReadImage(t1_image, sitk.sitkFloat32)
    t1ce_src = sitk.ReadImage(t1ce_image, sitk.sitkFloat32)
    t2_src = sitk.ReadImage(t2_image, sitk.sitkFloat32)
    label = sitk.ReadImage(label_image, sitk.sitkUInt8)

    flair_n4itk_mask = sitk.OtsuThreshold(flair_src, 0, 1, 200)
    flair_n4itk = corrector.Execute(flair_src, flair_n4itk_mask)
    t1_n4itk_mask = sitk.OtsuThreshold(t1_src, 0, 1, 200)
    t1_n4itk = corrector.Execute(t1_src, t1_n4itk_mask)
    t1ce_n4itk_mask = sitk.OtsuThreshold(t1ce_src, 0, 1, 200)
    t1ce_n4itk = corrector.Execute(t1ce_src, t1ce_n4itk_mask)
    t2_n4itk_mask = sitk.OtsuThreshold(t2_src, 0, 1, 200)
    t2_n4itk = corrector.Execute(t2_src, t2_n4itk_mask)

    flair_array = sitk.GetArrayFromImage(flair_n4itk)
    t1_array = sitk.GetArrayFromImage(t1_n4itk)
    t1ce_array = sitk.GetArrayFromImage(t1ce_n4itk)
    t2_array = sitk.GetArrayFromImage(t2_n4itk)
    label_array = sitk.GetArrayFromImage(label)

    flair_array_nor = norm_intens_crop.norm_intens_filter(flair_array)
    t1_array_nor = norm_intens_crop.norm_intens_filter(t1_array)
    t1ce_array_nor = norm_intens_crop.norm_intens_filter(t1ce_array)
    t2_array_nor = norm_intens_crop.norm_intens_filter(t2_array)

    flair_crop = norm_intens_crop.crop_center(flair_array_nor, 160, 160)
    t1_crop = norm_intens_crop.crop_center(t1_array_nor, 160, 160)
    t1ce_crop = norm_intens_crop.crop_center(t1ce_array_nor, 160, 160)
    t2_crop = norm_intens_crop.crop_center(t2_array_nor, 160, 160)
    label_crop = norm_intens_crop.crop_center(label_array, 160, 160)

    print(f"Iteration {subsetindex+1}/{len(pathlgg_list)} completed. Processing: {brats_subset_path}")
    for n_slice in range(flair_crop.shape[0]):
       if np.max(label_crop[n_slice,:,:]) != 0:
        print("Condition satisfied, entering loop...")

        labelImg = label_crop[n_slice,:,:]

        four_modality_array = np.zeros((flair_crop.shape[1],flair_crop.shape[2],4), np.float)
        flairImg = flair_crop[n_slice,:,:]
        flairImg = flairImg.astype(np.float)
        four_modality_array[:,:,0] = flairImg

        t1Img = t1_crop[n_slice,:,:]
        t1Img = t1Img.astype(np.float)
        four_modality_array[:,:,1] = t1Img

        t1ceImg = t1ce_crop[n_slice,:,:]
        t1ceImg = t1ceImg.astype(np.float)
        four_modality_array[:,:,2] = t1ceImg

        t2Img = t2_crop[n_slice,:,:]
        t2Img = t2Img.astype(np.float)
        four_modality_array[:,:,3] = t2Img

        imagepath = outputImg_path + "/" + str(pathlgg_list[subsetindex]) + "_" + str(n_slice) + ".npy"
        labelpath = outputLabel_path + "/" + str(pathlgg_list[subsetindex]) + "_" + str(n_slice) + ".npy"
        np.save(imagepath, four_modality_array)
        np.save(labelpath, labelImg)
       else:
        print("Condition not satisfied, skipping loop...")
end_LGG = time.time()
print("LGG MRIs Preprocessed")
LGG_time = end_LGG-start_LGG
print('time taken to preprocess LGG MRIs = {} seconds'.format(LGG_time))

import numpy as np

# Assuming label_crop is your label image after preprocessing
af_label_image = '/content/drive/MyDrive/CSC8639_folder/sample_data/sample_hgg/Brats18_2013_17_1/Brats18_2013_17_1_seg.nii'
af_label = sitk.ReadImage(af_label_image, sitk.sitkUInt8)
af_label_array = sitk.GetArrayFromImage(af_label)
af_label_value = np.unique(af_label_array)
print("Unique label values:", af_label_value)

bef_label_image = '/content/drive/MyDrive/CSC8639_folder/sample_data/sample_hgg/Brats18_2013_12_1/Brats18_2013_12_1_flair.nii'
bef_label = sitk.ReadImage(bef_label_image, sitk.sitkUInt8)
bef_label_array = sitk.GetArrayFromImage(bef_label)
bef_label_value = np.unique(bef_label_array)

print("Unique label values:", bef_label_value)